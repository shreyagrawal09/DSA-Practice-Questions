class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = findFirst(nums, target);
        int last = findLast(nums, target);
        return new int[] {first, last};
    }

    private int findFirst(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        int index = -1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                index = mid;
                end = mid - 1; 
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        return index;
    }

    private int findLast(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        int index = -1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                index = mid;
                start = mid + 1; 
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        return index;
    }
}

// method 2:

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans={-1,-1};
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                ans[0]=i;
           break;
            }
        }
        for(int i=nums.length-1;i>=0;i--){
            if(nums[i]==target){
                ans[1]=i;
           break;
            }
        }
            return ans;       
    }
}
